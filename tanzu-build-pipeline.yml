resources:
  repositories:
  - repository: tpk8s-ado-demo # The name used to reference this repository in the checkout step
    type: github
    endpoint: warroyo
    name: warroyo/tpk8s-ado-demo

trigger:
  - ado-demo

pool:
  vmImage: ubuntu-latest

variables:
  - name: Project
    value: AMER-West
    readonly: false
  - name: Space
    value: dev-int
    readonly: false
  - name: ServiceConnection
    value: ghcr
  - name: ContainerRegistry
    value: ghcr.io/{contact.team}/{name}
  - name: BuildPlanSource
    value: custom-build-plan
    readonly: false
steps:
  - checkout: self
    
    persistCredentials: true
  - checkout: tpk8s-ado-demo
  - task: Docker@2
    displayName: Login to Container Registry
    inputs:
      command: login
      containerRegistry: $(ServiceConnection)
  - task: CmdLine@2
    displayName: Login to Platform
    inputs:
      script: |
        export TANZU_CLI_CEIP_OPT_IN_PROMPT_ANSWER=no
        wget https://github.com/vmware-tanzu/tanzu-cli/releases/download/v1.3.0/tanzu-cli-linux-amd64.tar.gz -O /tmp/tanzu.tar.gz
        tar -xvf /tmp/tanzu.tar.gz -C /tmp
        install /tmp/v1.3.0/tanzu-cli-linux_amd64 /usr/local/bin/tanzu
        tanzu config eula accept
        tanzu plugin install --group vmware-tanzu/app-developer
        
        tanzu login
    env:
      TANZU_API_TOKEN: $(TanzuApiToken)

  - task: CmdLine@2
    displayName: Build Application
    inputs:
      workingDirectory: '$(Build.SourcesDirectory)/spring-music'
      script: |
        tanzu build config --build-plan-source-type=ucp --containerapp-registry $CONTAINERREGISTRY --build-plan-source $BUILDPLANSOURCE
        
        tanzu project use $PROJECT
        tanzu space use $SPACE
        
        tanzu build -o deploy

        tanzu promote --from-build ./deploy --to ../tpk8s-ado-demo/amer-west/spaces/dev-int
  - script: |
      git config --global user.email tpk8s-ado-automation@vmware.com & git config --global user.name "ado"
    workingDirectory: '$(Build.SourcesDirectory)/tpk8s-ado-demo'
  - script: |
      set -o errexit
      git fetch --all
      git add .
      if git diff --cached --exit-code ./; then
        echo "Nothing to commit"
        echo "##vso[task.setvariable variable=doPR]No"
        exit 0
      fi
      echo "committing new promoted files"
      git checkout -b $(Build.BuildNumber)
      git commit -m "promoting build $(Build.BuildNumber)"
      git push --set-upstream origin $(Build.BuildNumber)
      echo "##vso[task.setvariable variable=doPR]Yes" 
    displayName: push promoted files to gitops repo
    workingDirectory: '$(Build.SourcesDirectory)/tpk8s-ado-demo'
  - script: |
      curl -LO https://github.com/jenkins-x-plugins/jx-scm/releases/download/v0.2.41/jx-scm-linux-amd64.tar.gz
      tar -xvf jx-scm-linux-amd64.tar.gz
      ./jx-scm pull-request create \
        --kind "github" \
        --server "https://github.com" \
        --owner "warroyo" \
        --name "tpk8s-ado-demo" \
        --head "$(Build.BuildNumber)" \
        --title "promote pipeline PR" \
        --body "add new promoted build" \
        --base "main" \
        --allow-update
    displayName: create PR
    condition: and(succeeded(), eq(variables['doPr'], 'Yes'))
    env:
      GIT_TOKEN: $(github-pat)